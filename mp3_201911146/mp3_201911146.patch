diff --git a/defs.h b/defs.h
index 1f66292..fea633f 100644
--- a/defs.h
+++ b/defs.h
@@ -120,7 +120,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
-void						pvminfo(void);
+void			pvminfo(void);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/firsttest.c b/firsttest.c
index fd4e0ee..65516bf 100644
--- a/firsttest.c
+++ b/firsttest.c
@@ -1,13 +1,14 @@
 #include "types.h"
 #include "user.h"
 
-//first testcode
-// you must show different VM space among processes
 int main(){
-	printf(1, "first testcode\n");
-	pvminfo(); //usage of pvminfo. delete this line if you don't implement this fuction yet.
-	// write code to compare VM space among processes using pvminfo() function
-	// the API for allocation or process creation is almost same to x86.
-	// If you don't know how to use that API, refer to other test code like "init.c", "usertest.c"
+	int pid;
+	pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      exit();
+    }
+	wait();
+	pvminfo();
 	exit();
 }
diff --git a/proc.c b/proc.c
index 4f6f517..6428ede 100644
--- a/proc.c
+++ b/proc.c
@@ -176,9 +176,11 @@ growproc(int n)
 
 
 void pvminfo(void){
+  struct proc *curproc = myproc();
 	pde_t *ppgdir;
-	ppgdir = 0; // for compiling. You must remove this when succeesfully implemented
+	ppgdir = curproc->pgdir; // for compiling. You must remove this when succeesfully implemented
 	//in this space,
+  cprintf("current pid: %d\n",curproc->pid);
 	//you get pid and process' page directory address (pointer)
 	printvm(ppgdir);
 }
diff --git a/secondtest.c b/secondtest.c
index cd4c6d9..cf931b1 100644
--- a/secondtest.c
+++ b/secondtest.c
@@ -1,11 +1,21 @@
 #include "types.h"
 #include "user.h"
 
-//in second testcode, you must show the increase of usage of VM space
 int main(){
-	printf(1,"second testcode\n");
-  // write code to show the increase of usage of VM space using pvminfo() function
-  // the API for allocation or process creation is almost same to x86.
-  // If you don't know how to use that API, refer to other test code like "init.c", "usertest.c"
+  printf(1, "initial state of VM of this process\n");
+  pvminfo();
+  char *a;
+  char *p;
+  uint amt;
+  printf(1, "\n after allocating page \n");
+#define BIG (100*1024)
+  a = sbrk(0);
+  amt = (BIG) - (uint)a;
+  p = sbrk(amt);
+  if (p != a) {
+    printf(1, "sbrk test failed to grow big address space; enough phys mem?\n");
+    exit();
+  }
+  pvminfo();
 	exit();
 }
diff --git a/vm.c b/vm.c
index 6526331..de56762 100644
--- a/vm.c
+++ b/vm.c
@@ -32,7 +32,26 @@ seginit(void)
 void
 printvm(pde_t *pgdir)
 {
-	cprintf("will be implemented\n");
+  pde_t *pde;
+  pde_t *pgtab;
+  pde_t *pte;
+  cprintf("Page directory VA: 0x%x \n",pgdir);
+  int i;
+  int j;
+
+  for(i = 0; i < 512; i++){
+    pde = &pgdir[i];
+    if ((*pde & 0x005) ==  0x005 ){
+      cprintf("---%d: PDE: 0x%x PA: 0x%x \n",i,*pde,PTE_ADDR(pgdir));
+      pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+      for(j = 0; j < NPDENTRIES; j++){
+        pte = &pgtab[j];
+        if ((*pte & 0x005) == 0x005 ){
+          cprintf("------%d: PTE: 0x%x PA: 0x%x \n",j,*pte,PTE_ADDR(*pde));
+        }
+      }
+    }
+  }
 }
 
 
