diff --git a/proc.c b/proc.c
index 806b1b1..f5b6385 100644
--- a/proc.c
+++ b/proc.c
@@ -13,7 +13,6 @@ struct {
 } ptable;
 
 static struct proc *initproc;
-
 int nextpid = 1;
 extern void forkret(void);
 extern void trapret(void);
@@ -75,13 +74,12 @@ allocproc(void)
 {
   struct proc *p;
   char *sp;
-
+  
   acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
     if(p->state == UNUSED)
       goto found;
-
   release(&ptable.lock);
   return 0;
 
@@ -149,7 +147,6 @@ userinit(void)
   acquire(&ptable.lock);
 
   p->state = RUNNABLE;
-
   release(&ptable.lock);
 }
 
@@ -183,7 +180,7 @@ fork(void)
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
-
+  
   // Allocate process.
   if((np = allocproc()) == 0){
     return -1;
@@ -215,7 +212,7 @@ fork(void)
   acquire(&ptable.lock);
 
   np->state = RUNNABLE;
-
+  np->consnum = 0;
   release(&ptable.lock);
 
   return pid;
@@ -248,7 +245,8 @@ exit(void)
   curproc->cwd = 0;
 
   acquire(&ptable.lock);
-
+  //수정할 부분
+  cprintf("\n%s(%d) performed %d context switches\n",curproc->name,curproc->pid,curproc->consnum);
   // Parent might be sleeping in wait().
   wakeup1(curproc->parent);
 
@@ -259,6 +257,7 @@ exit(void)
       if(p->state == ZOMBIE)
         wakeup1(initproc);
     }
+  // 수정할 부분 과제
   }
 
   // Jump into the scheduler, never to return.
@@ -316,7 +315,7 @@ wait(void)
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
 //  - choose a process to run
-//  - swtch to start running that process
+//  - switch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
 void
@@ -351,7 +350,6 @@ scheduler(void)
       c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -367,7 +365,6 @@ sched(void)
 {
   int intena;
   struct proc *p = myproc();
-
   if(!holding(&ptable.lock))
     panic("sched ptable.lock");
   if(mycpu()->ncli != 1)
@@ -378,7 +375,9 @@ sched(void)
     panic("sched interruptible");
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
+  p->consnum++;
   mycpu()->intena = intena;
+
 }
 
 // Give up the CPU for one scheduling round.
diff --git a/proc.h b/proc.h
index 1647114..b17cc2c 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int consnum;                 // Process switch number
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index ee85261..c2703a3 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getcswitch(void);
+extern int sys_setcswitch(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getcswitch]    sys_getcswitch,
+[SYS_setcswitch]    sys_setcswitch,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..4ad0359 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getcswitch  22
+#define SYS_setcswitch  23
diff --git a/sysproc.c b/sysproc.c
index 0686d29..7ae6db4 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,20 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// return how many context switch occured
+int
+sys_getcswitch(void)
+{
+  return myproc()->consnum;
+}
+int
+sys_setcswitch(void)
+{
+  int n;
+  if(argint(0, &n) < 0)
+    return -1;
+  myproc()->consnum = n;
+  return 0;
+
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..656fe9f 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getcswitch(void);
+int setcswitch(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..88b85b4 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getcswitch)
+SYSCALL(setcswitch)
\ No newline at end of file
